apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "saleor-core.fullname" . }}-worker
  labels:
    {{- include "saleor-core.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  # Running this app without some form of central storage does not make sense
  {{- if not (and (not .Values.web.autoscaling.enabled) (and (not .Values.persistence.enabled) (not .Values.externalServices.cloudStorage.enabled))) }}
  replicas: {{ .Values.web.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "saleor-core.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "saleor-core.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "saleor-core.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automount }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        # ConfigMap for the django based application settings
        - name: custom-settings
          configMap:
          {{- if (not .Values.alternativeAppSettingsConfigMap) }}
            name: {{ include "saleor-core.fullname" . }}-custom-settings
          {{- else }}
            name: {{ .Values.alternativeAppSettingsConfigMap }}
          {{- end }}
        # ConfigMap for the nginx configuration and the static assets script
        - name: web-conf
          configMap:
            name: {{ include "saleor-core.fullname" . }}-web
        # Volume for the images and unstructured data
        - name: saleor-data-media
        {{- if and .Values.persistence.enabled .Values.persistence.existingPvc }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingPvc }}
        {{- else if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "saleor-core.fullname" .) }}
        {{- else }}
          emptyDir:
            medium: Memory
        {{- end }}
        # Volume for the web assets data
        - name: saleor-data-static
          emptyDir:
            medium: Memory
      initContainers:
        # Wait for redis and postgresql to be ready
        - name: "{{- include "saleor-core.workerContainerName" . }}-init-1"
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- include "saleor-core.env" . | indent 10 }}
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag | default (cat "dev-" .Chart.AppVersion) | nospace }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
            - >
              {{ include "saleor.postgresql.isReady" . | nindent 14 }}
              {{ include "saleor.redis.isReady" . | nindent 14 }}
        # Deploy static assets into memory
        - name: "{{- include "saleor-core.workerContainerName" . }}-init-2"
          volumeMounts:
            - name: custom-settings
              mountPath: /app/saleor/custom-settings.py
              subPath: custom-settings.py
              readOnly: true
            - name: web-conf
              mountPath: /home/saleor/configure_web.sh
              subPath: configure_web.sh
              readOnly: true
            - name: saleor-data-static
              mountPath: /app/static
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- include "saleor-core.env" . | indent 10 }}
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag | default (cat "dev-" .Chart.AppVersion) | nospace }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - /home/saleor/configure_web.sh
          args:
            - "true"
      containers:
        # Deploy celery workers
        - name: "{{- include "saleor-core.workerContainerName" . }}"
          volumeMounts:
            - name: saleor-data-static
              mountPath: /app/static
            - name: saleor-data-media
              mountPath: /app/media
            - name: custom-settings
              mountPath: /app/saleor/custom-settings.py
              subPath: custom-settings.py
              readOnly: true
          {{- include "saleor-core.env" . | indent 10 }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["celery"]
          args:
            - --app
            - saleor.celeryconf:app
            - worker
            - --without-gossip
            - --without-mingle
            - --heartbeat-interval={{ .Values.worker.heartBeatIntervalSeconds }}
            - --loglevel={{ .Values.worker.logLevel }}
          {{- if (eq (.Values.worker.concurrency.type) "fixed") }}
            - --concurrency={{ .Values.worker.concurrency.fixed }}
          {{- else if (eq (.Values.worker.concurrency.type) "auto") }}
            - --autoscale={{ .Values.worker.concurrency.autoMaximum }},{{ .Values.worker.concurrency.autoMinimum }}
          {{- end }}
          {{- if (.Values.worker.hardTimeLimitSeconds) }}
            - --time-limit={{ .Values.worker.hardTimeLimitSeconds }}
          {{- end }}
          {{- if (.Values.worker.softTimeLimitSeconds) }}
            - --soft-time-limit={{ .Values.worker.softTimeLimitSeconds }}
          {{- end }}
          {{- if (eq .Values.worker.taskEventsMonitoring.enabled true) }}
            - --task-events
          {{- end }}
          # Disabled by default due to issues with failures that need to be worked out
          {{- if .Values.worker.livenessProbeSettings.enabled }}
          livenessProbe: {{ toYaml .Values.worker.livenessProbeSettings | nindent 12 }}
            exec:
              command:
                - /bin/bash
                - -c
                - >-
                {{- if (eq .Values.worker.autoscaling.enabled false) }}
                # This liveness probe is only suitable if autoscaling is turned off as it can trigger upscaling
                  'if [[ "$(celery --app=saleor.celeryconf:app inspect ping | grep pong)" == *"pong"* ]]; then exit 0; else exit 1; fi && echo "ready"'
                {{- else if (eq .Values.worker.autoscaling.enabled true) }}
                  'echo "ready"'
                {{- end }}
          {{- end }}
          # Disabled by default due to issues with failures that need to be worked out
          {{- if .Values.worker.readinessProbeSettings.enabled }}
          readinessProbe: {{ toYaml .Values.worker.readinessProbeSettings | nindent 12 }}
            exec:
              command:
                - /bin/bash
                - -c
                - >-
                {{- if (eq .Values.worker.autoscaling.enabled false) }}
                # This liveness probe is only suitable if autoscaling is turned off as it can trigger upscaling
                  'if [[ "$(celery --app=saleor.celeryconf inspect ping | grep pong)" == *"pong"* ]]; then exit 0; else exit 1; fi && echo "ready"'
                {{- else if (eq .Values.worker.autoscaling.enabled true) }}
                  'echo "ready"'
                {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
