# @format

## Saleor worker settings

worker:
  replicaCount: 2
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  concurrency:
    # choose between fixed or auto
    type: fixed
    fixed: 2
    autoMinimum: 2
    autoMaximum: 6
  heartBeatIntervalSeconds: 10
  softTimeLimitSeconds:
  hardTimeLimitSeconds:
  # Logging level, choose between DEBUG, INFO, WARNING, ERROR, CRITICAL, or FATAL.
  logLevel: INFO
  taskEventsMonitoring:
    enabled: true
  livenessProbeSettings:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbeSettings:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
    timeoutSeconds: 2
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}

## Saleor api settings

api:
  replicaCount: 2
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  livenessProbeSettings:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 5
    successThreshold: 1
    timeoutSeconds: 2
  readinessProbeSettings:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 5
    successThreshold: 1
    timeoutSeconds: 2
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: 2000m
      memory: 1Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  gunicorn:
    log_level: info
    forwarded_allow_ips: 127.0.0.1
    proxy_allow_ips: 127.0.0.1
    host: 0.0.0.0
    port: 8000
    backlog: 1024
    worker_processes: 2
    worker_class: uvicorn.workers.UvicornWorker
    threads_per_worker: 1
    max_worker_connections: 200
    silent_worker_timeout: 30
    worker_restart_graceful_timeout: 60
    connection_keep_alive: 5

# nginx server (for static assets and media files
# Note:
# If externalServices.cloudStorage.enabled: true
# this deployment will not go ahead as it is one or the other
web:
  replicaCount: 2
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  livenessProbeSettings:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbeSettings:
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    requests:
      cpu: 250m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  nodeSelector: {}
  tolerations: []
  image:
    repository: "nginxinc/nginx-unprivileged"
    tag: "1.19.5"
    pullPolicy: IfNotPresent
  port: 8080
  nginxConfig:
    workerProcesses: 2
    workerConnections: 1024
    accessLogs:
      enabled: true
      muteHealthChecks: true
    errorLogs:
      enabled: true
      level: warn
    logFormat: >-
      $remote_addr - $remote_user [$time_local]
      "$request" $status $body_bytes_sent
      "$http_referer" "$http_user_agent";

## Undenominated Settings

existingSecret:

image:
  repository: ghcr.io/eirenauts/saleor-core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

initImage:
  repository: ghcr.io/eirenauts/saleor-core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Whether to automount the serviceAccount token
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 0
  fsGroup: 1001
  # fsGroupChangePolicy: OnRootMismatch

containerSecurityContext:
  runAsNonRoot: true
  allowPrivilegeEscalation: false
#  capabilities:
#    drop:
#      - ALL
#    readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: core.chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Note:
## If not using cloudstorage as a backend for media and static assets
## persistence.enabled must be set to true for a functional system
## persistence.accessModes should be set to ReadWriteMany to support multiple replicas
## to allow for access to a central shared volume by multiple pods

persistence:
  enabled: true
  accessMode: ReadWriteMany
  size: 8Gi
  volumeMode: Filesystem
  # Uncomment storageClass: "" to disable dynamic provisioning
  # storageClass: ""
  # To use an existing PVC rather than have it provisioned by this chart,
  # uncomment and enter below
  existingPvc:

## Configuration Settings

alternativeAppSettingsConfigMap:
debugMode: false
settingsModule: saleor.custom-settings
internalIps:
  - 127.0.0.1
timezone: Etc/UTC
languageCode: en
internationalization: true
localization: true
ssl:
  enabled: false
staticUrl: /static/
mediaUrl: /media/
enableSilk: false
# If deploying demo only, use US and USD.
defaultCountry: US
defaultCurrency: USD
googleAnalyticsTrackingId:
maxCheckoutLineQuantity: 50
requireNewCustomerAccountConfirmation: true
# To use playground and the django toolbar, the ghcr.io/eirenauts/saleor-core:dev-${release} must be used
graphql:
  playgroundEnabled: false
enableDjangoDebugToolbar: false
allowedHosts:
  includeIngressHosts: true
  hosts:
    []
    # - localhost
    # - 127.0.0.1
allowedGraphqlOrigins: "*"
admins: []
#      - name: saleor-admin
#        email: saleor.local

images:
  createOnDemand: false

logoutOnPasswordChange: false

tokens:
  jwt:
    accessTokenExpires: true
    accessTokenExpiresIn: "120 minutes"
    refreshTokenExpiresIn: "30 days"
    emailChangeRequestTokenExpiresIn: "1 hour"

# Django secret key should be set as a secret under SALEOR_SECRET_KEY
secretKey:

allowablePlugins:
  - "saleor.plugins.vatlayer.plugin.VatlayerPlugin"
  - "saleor.plugins.invoicing.plugin.InvoicingPlugin"
  - "saleor.payment.gateways.braintree.plugin.BraintreeGatewayPlugin"
  - "saleor.payment.gateways.dummy.plugin.DummyGatewayPlugin"

# Uncomment below to enable additional plugins
#  - "saleor.plugins.avatax.plugin.AvataxPlugin"
#  - "saleor.plugins.vatlayer.plugin.VatlayerPlugin"
#  - "saleor.plugins.webhook.plugin.WebhookPlugin"
#  - "saleor.payment.gateways.dummy.plugin.DummyGatewayPlugin"
#  - "saleor.payment.gateways.dummy_credit_card.plugin.DummyCreditCardGatewayPlugin"
#  - "saleor.payment.gateways.stripe.plugin.StripeGatewayPlugin"
#  - "saleor.payment.gateways.braintree.plugin.BraintreeGatewayPlugin"
#  - "saleor.payment.gateways.razorpay.plugin.RazorpayGatewayPlugin"
#  - "saleor.payment.gateways.adyen.plugin.AdyenGatewayPlugin"
#  - "saleor.plugins.invoicing.plugin.InvoicingPlugin"

externalServices:
  # Redis is a cache
  redis:
    # Leave empty in `values.yaml` for security reasons
    password: ""
    host: ""
    # tls true => use redis in url instead of redis
    tls: false
    port: 6379
    dbNumber: 0
    celeryBrokerDbNumber: 1

  # Postgresql is the primary database
  postgresql:
    # Leave empty in `values.yaml` for security reasons
    password: ""
    user: ""
    host: ""
    port: 5432
    database: saleor
    requireSSL: true

  # Sentry is for exception observability
  sentry:
    enabled: false
    # The dsn should be set in the secrets file rather than in `values.yaml`
    dsn:

  # See https://developers.google.com/recaptcha/docs/versions
  googleRecaptcha:
    publicKey:

  # WARNING! recapthcaPrivateKey and secretKey
  # recapthcaPrivateKey should be set in the secrets file as RECAPTCHA_PRIVATE_KEY
  recapthcaPrivateKey:

  # Email smtp settings
  email:
    defaultFromEmail: saleor@saleor.local
    # generic should work for a smtp servers like gmail, ovh, mailgun and generic smtp servers
    # format:
    # smtp://[loginName]@[customDomainName]:[password]@[providerDomainName]:[port]/[extraArgs]
    smtpSettings:
      # Password should be set in the secrets file under email-password
      password:
      generic:
        enabled: false
        loginName:
        customDomainName:
        providerDomainName:
        port: 465
        extraArgs: "?ssl=True"
      mailjet:
        enabled: false
        username:
      amazonSES:
        enabled: false
        username:
        region: eu-west-1

  # If cloudstorage is enabled, static and media assets will be served from object storage
  cloudStorage:
    enabled: false
    s3:
      enabled: false
      # keyId and keySecret should be set in the secrets file.
      # Leave empty here in `values.yaml` for security reasons
      keyId:
      keySecret:
      location: ""
      queryStringAuth: false
      defaultAcl: "public-read"
      endpointUrl:
      region: "eu-west-1"
      mediaBucketName:
      staticBucketName:
      mediaCustomDomain:
      staticCustomDomain:

  # To 'fetch taxes' for various countries to the dashboard
  # To take effect, requires that `plugins.enabled` = `true`
  vatLayer:
    enabled: false
    # The vatLayerAccessKey should be set as a secret called VATLAYER_API_KEY
    vatLayerAccessKey:

  braintree:
    enabled: false
    sandboxMode: true
    require3DSecure: false
    merchantId:
    publicKey:
    currencies: "AUD,BRL,CAD,CHF,CNY,CZK,DKK,EUR,GBP,HKD,HUF,ILS,INR,ISK,KRW,NOK,NZD,PLN,RUB,SEK,SGD,TRY,TWD,USD,UYU,VND,ZAR,"
    # The privateKey should be set as a secret called BRAINTREE_PRIVATE_KEY
    privateKey:

## Job settings

jobs:
  init:
    migrations:
      enabled: true
      activeDeadlineSeconds: 480
      backOffLimit: 3
      ttlSecondsAfterFinished: 600
      weight: 1
    createUsers:
      enabled: true
      activeDeadlineSeconds: 240
      backOffLimit: 3
      ttlSecondsAfterFinished: 600
      weight: 2
      users:
        # secret key for saleor-user-1@saleor.local is SALEOR_USER_1_EXAMPLE_PASS
        - email: saleor-user-1@saleor.local
          password: unsafe_password
          isStaff: false
          isSuperuser: false
        # secret key for saleor-user-2@example.com is SALEOR_USER_2_EXAMPLE_PASS
        - email: saleor-user-2@example.com
          password: unsafe_password
          isStaff: true
          isSuperuser: false
        # secret key for saleor-superuser-1@saleor.local is SALEOR_SUPERUSER_1_SALEOR_PASS
        - email: saleor-superuser-1@saleor.local
          password: unsafe_password
          isStaff: true
          isSuperuser: true
    currencyUpdates:
      enabled: false
      # The openExchangesApiKey should be set as a secret called OPENEXCHANGERATES_API_KEY
      openExchangesApiKey:
      activeDeadlineSeconds: 240
      backOffLimit: 3
      ttlSecondsAfterFinished: 600
      weight: 3
    plugins:
      enabled: true
      activeDeadlineSeconds: 240
      backOffLimit: 3
      ttlSecondsAfterFinished: 600
      weight: 4
    empty:
      enabled: true
      activeDeadlineSeconds: 300
      backOffLimit: 1
      ttlSecondsAfterFinished: 120
      weight: 5
